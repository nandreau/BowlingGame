// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowBowlingGame.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bowling")]
    public partial class BowlingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BowlingGame.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Bowling", "Calcul des scores pour une partie de bowling commence", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie sans strikes ni spares")]
        public virtual void PartieSansStrikesNiSpares()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie sans strikes ni spares", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table1.AddRow(new string[] {
                            "Joueur 1",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 6"});
                table1.AddRow(new string[] {
                            "Joueur 2",
                            "2, 4",
                            "6, 3",
                            "7, 0",
                            "5, 2",
                            "8, 1",
                            "9, 0",
                            "3, 6",
                            "7, 2",
                            "5, 3",
                            "6, 1"});
#line 6
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table1, "When ");
#line hidden
#line 10
testRunner.Then("le score total de Joueur 1 devrait être 69", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
testRunner.And("le score total de Joueur 2 devrait être 80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec un spare")]
        public virtual void PartieAvecUnSpare()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec un spare", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table2.AddRow(new string[] {
                            "Joueur 1",
                            "5, 5",
                            "3, 4",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0"});
                table2.AddRow(new string[] {
                            "Joueur 2",
                            "4, 6",
                            "2, 3",
                            "6, 3",
                            "7, 0",
                            "5, 2",
                            "8, 1",
                            "9, 0",
                            "3, 6",
                            "7, 2",
                            "5, 3"});
#line 15
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table2, "When ");
#line hidden
#line 19
testRunner.Then("le score total de Joueur 1 devrait être 72", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
testRunner.And("le score total de Joueur 2 devrait être 84", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec un strike")]
        public virtual void PartieAvecUnStrike()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec un strike", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table3.AddRow(new string[] {
                            "Joueur 1",
                            "10",
                            "3, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5"});
                table3.AddRow(new string[] {
                            "Joueur 2",
                            "10",
                            "3, 5",
                            "7, 0",
                            "5, 2",
                            "8, 1",
                            "9, 0",
                            "3, 6",
                            "7, 2",
                            "5, 3",
                            "6, 1"});
#line 24
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table3, "When ");
#line hidden
#line 28
testRunner.Then("le score total de Joueur 1 devrait être 78", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
testRunner.And("le score total de Joueur 2 devrait être 91", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec seulement des strikes et des spares")]
        public virtual void PartieAvecSeulementDesStrikesEtDesSpares()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec seulement des strikes et des spares", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table4.AddRow(new string[] {
                            "Joueur 1",
                            "10",
                            "10",
                            "10",
                            "10",
                            "10",
                            "10",
                            "10",
                            "10",
                            "10",
                            "10, 10, 10"});
                table4.AddRow(new string[] {
                            "Joueur 2",
                            "9, 1",
                            "9, 1",
                            "9, 1",
                            "9, 1",
                            "9, 1",
                            "9, 1",
                            "9, 1",
                            "9, 1",
                            "9, 1",
                            "9, 1, 10"});
#line 33
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table4, "When ");
#line hidden
#line 37
testRunner.Then("le score total de Joueur 1 devrait être 300", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
testRunner.And("le score total de Joueur 2 devrait être 191", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec un seul joueur")]
        public virtual void PartieAvecUnSeulJoueur()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec un seul joueur", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table5.AddRow(new string[] {
                            "Joueur 1",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 6"});
#line 42
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table5, "When ");
#line hidden
#line 45
testRunner.Then("le score total de Joueur 1 devrait être 69", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec trois joueurs")]
        public virtual void PartieAvecTroisJoueurs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec trois joueurs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table6.AddRow(new string[] {
                            "Joueur 1",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 5",
                            "2, 4",
                            "6, 0",
                            "3, 6"});
                table6.AddRow(new string[] {
                            "Joueur 2",
                            "2, 4",
                            "6, 3",
                            "7, 0",
                            "5, 2",
                            "8, 1",
                            "9, 0",
                            "3, 6",
                            "7, 2",
                            "5, 3",
                            "6, 1"});
                table6.AddRow(new string[] {
                            "Joueur 3",
                            "2, 5",
                            "6, 3",
                            "7, 0",
                            "5, 2",
                            "8, 1",
                            "9, 0",
                            "3, 6",
                            "7, 2",
                            "5, 3",
                            "6, 1"});
#line 49
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table6, "When ");
#line hidden
#line 54
testRunner.Then("le score total de Joueur 1 devrait être 69", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
testRunner.And("le score total de Joueur 2 devrait être 80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
testRunner.And("le score total de Joueur 3 devrait être 81", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec une frame incomplète")]
        public virtual void PartieAvecUneFrameIncomplete()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec une frame incomplète", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 59
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table7.AddRow(new string[] {
                            "Joueur 1",
                            "4, 4",
                            "4, 4",
                            "5, 5",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            ""});
                table7.AddRow(new string[] {
                            "Joueur 2",
                            "4, 4",
                            "",
                            "5, 5",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
#line 60
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table7, "When ");
#line hidden
#line 64
testRunner.Then("une erreur devrait se déclencher pour Joueur 1 avec le message \"La frame 10 est i" +
                        "ncomplète.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
testRunner.And("une erreur devrait se déclencher pour Joueur 2 avec le message \"La frame 2 est in" +
                        "complète.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec une frame semi-incomplète")]
        public virtual void PartieAvecUneFrameSemi_Incomplete()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec une frame semi-incomplète", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 68
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table8.AddRow(new string[] {
                            "Joueur 1",
                            "10",
                            "3",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
                table8.AddRow(new string[] {
                            "Joueur 2",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 6"});
                table8.AddRow(new string[] {
                            "Joueur 3",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "10, 1"});
#line 69
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table8, "When ");
#line hidden
#line 74
testRunner.Then("une erreur devrait se déclencher pour Joueur 1 avec le message \"La frame 2 est se" +
                        "mi-incomplète.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
testRunner.And("une erreur devrait se déclencher pour Joueur 2 avec le message \"La frame 10 est s" +
                        "emi-incomplète pour un spare.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
testRunner.And("une erreur devrait se déclencher pour Joueur 3 avec le message \"La frame 10 est s" +
                        "emi-incomplète pour un strike.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec un nombre de frames supérieur à 10")]
        public virtual void PartieAvecUnNombreDeFramesSuperieurA10()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec un nombre de frames supérieur à 10", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10",
                            "frame 11",
                            "frame 12"});
                table9.AddRow(new string[] {
                            "Joueur 1",
                            "10",
                            "3",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
#line 80
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table9, "When ");
#line hidden
#line 83
testRunner.Then("une erreur devrait se déclencher pour Joueur 1 avec le message \"Le nombre de fram" +
                        "es doit être exactement 10, mais il y a 12 frames.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec un nombre de frames inferieur à 10")]
        public virtual void PartieAvecUnNombreDeFramesInferieurA10()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec un nombre de frames inferieur à 10", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7"});
                table10.AddRow(new string[] {
                            "Joueur 1",
                            "10",
                            "3",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
#line 87
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table10, "When ");
#line hidden
#line 90
testRunner.Then("une erreur devrait se déclencher pour Joueur 1 avec le message \"Le nombre de fram" +
                        "es doit être exactement 10, mais il y a seulement 7 frames.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec une frame dont il y a plus de lancers que nécessaire")]
        public virtual void PartieAvecUneFrameDontIlYAPlusDeLancersQueNecessaire()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec une frame dont il y a plus de lancers que nécessaire", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 93
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table11.AddRow(new string[] {
                            "Joueur 1",
                            "10, 1",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
                table11.AddRow(new string[] {
                            "Joueur 2",
                            "4, 6",
                            "2, 2, 2",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
#line 94
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table11, "When ");
#line hidden
#line 98
testRunner.Then("une erreur devrait se déclencher pour Joueur 1 avec le message \"La frame 1 contie" +
                        "nt trop de lancers pour un strike.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
testRunner.And("une erreur devrait se déclencher pour Joueur 2 avec le message \"La frame 2 contie" +
                        "nt trop de lancers.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec une frame dont le score total est trop élevé")]
        public virtual void PartieAvecUneFrameDontLeScoreTotalEstTropEleve()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec une frame dont le score total est trop élevé", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table12.AddRow(new string[] {
                            "Joueur 1",
                            "4, 7",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
                table12.AddRow(new string[] {
                            "Joueur 2",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "10, 10, 11"});
#line 103
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table12, "When ");
#line hidden
#line 107
testRunner.Then("une erreur devrait se déclencher pour Joueur 1 avec le message \"Le total des quil" +
                        "les pour la frame 1 ne peut pas dépasser 10. Total trouvé: 11.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
testRunner.And("une erreur devrait se déclencher pour Joueur 2 avec le message \"Le total des quil" +
                        "les pour la frame 10 ne peut pas dépasser 30. Total trouvé: 31.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Partie avec une frame dont la nombre de quilles tombés est incorrecte")]
        public virtual void PartieAvecUneFrameDontLaNombreDeQuillesTombesEstIncorrecte()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Partie avec une frame dont la nombre de quilles tombés est incorrecte", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 111
testRunner.Given("un nouveau jeu de bowling commence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "frame 1",
                            "frame 2",
                            "frame 3",
                            "frame 4",
                            "frame 5",
                            "frame 6",
                            "frame 7",
                            "frame 8",
                            "frame 9",
                            "frame 10"});
                table13.AddRow(new string[] {
                            "Joueur 1",
                            "4, -1",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
                table13.AddRow(new string[] {
                            "Joueur 2",
                            "4, 4",
                            "14, -7",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4",
                            "4, 4"});
#line 112
testRunner.When("les lancers des joueurs sont:", ((string)(null)), table13, "When ");
#line hidden
#line 116
testRunner.Then("une erreur devrait se déclencher pour Joueur 1 avec le message \"La frame 1 doit s" +
                        "eulement contenir des nombres positifs. Valeur trouvée: -1.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
testRunner.And("une erreur devrait se déclencher pour Joueur 2 avec le message \"La frame 2 doit s" +
                        "eulement contenir des nombres ne dépassant pas 10. Valeur trouvée: 14.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
